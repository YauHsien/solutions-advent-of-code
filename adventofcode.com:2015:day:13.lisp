(defun perm (list)
  (cond ((null (cdr list))     (cons list nil))
	((= 2 (length list))   (cons list (cons (reverse list) nil)))
	(t
	 (apply 'append (mapcar (lambda (a)
				  (mapcar (lambda (p) (cons a p))   (perm (remove a list))))
				list)))))
(defvar adventofcode.com/2015/day/13/input.txt "adventofcode.com:2015:day:13:input.txt")
(defun database (&optional (data-list (uiop:read-file-forms adventofcode.com/2015/day/13/input.txt)))
  (let ((someone (car data-list))
	(otherone (read-from-string (string-trim '(#\.) (caddr (cddddr (cddddr data-list))))))
	(gain (case (caddr data-list)
		    (gain (cadddr data-list))
		    (lose (- (cadddr data-list)))))
	(rest-list (cdddr (cddddr (cddddr data-list)))))
    (cons (list someone otherone gain)
	  (if (not (null rest-list)) (database rest-list)))))
(defun cast-list (&optional (data-list (uiop:read-file-forms adventofcode.com/2015/day/13/input.txt)))
	(let* ((someone (car data-list))
		   (rest-list (cdddr (cddddr (cddddr data-list))))
		   (rest-cast-list (if (not (null rest-list)) (cast-list rest-list))))
		  (if (member someone rest-cast-list) rest-cast-list
			  (cons someone rest-cast-list))))
(defun adventofcode.com/2015/day/13 (&optional (pathname adventofcode.com/2015/day/13/input.txt))
	(let ((forms (forms-inline (uiop:read-file-forms pathname))))
		 (loop for cz in forms until (eq -1 (car collection))
             collect (progn (setf (car collection) (+ (case c (#\( 1) (#\) -1)) (car collection)))
                      (setf (cdr collection) (+ 1 (cdr collection))))))

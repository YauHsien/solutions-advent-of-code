(defun perm (list)  (cond ((null (cdr list))   (cons list nil))
						((= 2 (length list))   (cons list (cons (reverse list) nil)))
						(t
						 (apply 'append (mapcar (lambda (a)
														(mapcar  (lambda (p) (cons a p))   (perm (remove a list))))
												list)))))
(defvar adventofcode.com/2015/day/13/input.txt "adventofcode.com:2015:day:13:input.txt")
(defun database (&optional (data-list (uiop:read-file-forms adventofcode.com/2015/day/13/input.txt)))
  (let ((someone (car data-list))
	(otherone (read-from-string (string-trim '(#\.) (caddr (cddddr (cddddr data-list))))))
	(gain (case (caddr data-list)
		    (gain (cadddr data-list))
		    (lose (- (cadddr data-list)))))
	(rest-list (cdddr (cddddr (cddddr data-list)))))
    (cons (list someone otherone gain)
	  (if (not (null rest-list)) (database rest-list)))))
(defun cast-list (&optional (data-list (uiop:read-file-forms adventofcode.com/2015/day/13/input.txt)))
	(let* ((someone (car data-list))
		   (rest-list (cdddr (cddddr (cddddr data-list))))
		   (rest-cast-list (if (not (null rest-list)) (cast-list rest-list))))
		  (if (member someone rest-cast-list) rest-cast-list
			  (cons someone rest-cast-list))))
(defun round-table-scores (database cast-list)
	(let* ((left-rotated (append (cdr cast-list) (cons (car cast-list) nil)))
		   (right-rotated (append (last cast-list) (butlast cast-list)))
		   (paired (mapcar 'list (append cast-list cast-list) (append left-rotated right-rotated))))
		 (mapcar (lambda (x) (caddar (member x database :test #'equal
											 :key (lambda (x) (cons (car x) (cons (cadr x) nil))))))
				 paired)))
(defun adventofcode.com/2015/day/13 (&optional (pathname adventofcode.com/2015/day/13/input.txt))
	(let* ((forms (uiop:read-file-forms pathname))
		   (database (database forms))
		   (cast-list (cast-list forms)))
		  ;(mapcar (lambda (x) (round-table-scores database x)) (perm cast-list))
		  ;(perm cast-list)
		  ;(mapcar (lambda (x) (let ((scores (round-table-scores database x))) (list (apply '+ scores) scores x))) (perm cast-list))
		  (apply 'max (mapcar (lambda (x) (apply '+ (round-table-scores database x))) (perm cast-list)))
		  ))
;; Call (adventofcode.com/2015/day/13) with a file with the default pathname "adventofcode.com:2015:day:13:input.txt" to find the answer.

(defun remove-nth-element (nth list)
  (if (zerop nth) (cdr list)
    (let ((last (nthcdr (1- nth) list)))
      (setcdr last (cddr last))
      list)))
(defun round-table/you-scores (database cast-list)
	(let ((scores-list (round-table-scores database cast-list)))
		 (apply 'append (mapcar (lambda (scores)
										(mapcar (lambda (x)
														(let ((r (remove-nth-element x scores)))
															 (if (= (length r) x) (remove-nth-element 0 r)
																 (remove-nth-element x r))))
												(loop for n below (length scores) collect n)))
								scores-list))))

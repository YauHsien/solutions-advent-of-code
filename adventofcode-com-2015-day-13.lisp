(defun perm (list)  (cond ((null (cdr list))   (cons list nil))
						((= 2 (length list))   (cons list (cons (reverse list) nil)))
						(t
						 (apply 'append (mapcar (lambda (a)
														(mapcar  (lambda (p) (cons a p))   (perm (remove a list))))
												list)))))
(defvar adventofcode.com/2015/day/13/input.txt "adventofcode.com:2015:day:13:input.txt")
(defun database (&optional (data-list (uiop:read-file-forms adventofcode.com/2015/day/13/input.txt)))
  (let ((someone (car data-list))
	(otherone (read-from-string (string-trim '(#\.) (caddr (cddddr (cddddr data-list))))))
	(gain (case (caddr data-list)
		    (gain (cadddr data-list))
		    (lose (- (cadddr data-list)))))
	(rest-list (cdddr (cddddr (cddddr data-list)))))
    (cons (list someone otherone gain)
	  (if (not (null rest-list)) (database rest-list)))))
(defun cast-list (&optional (data-list (uiop:read-file-forms adventofcode.com/2015/day/13/input.txt)))
	(let* ((someone (car data-list))
		   (rest-list (cdddr (cddddr (cddddr data-list))))
		   (rest-cast-list (if (not (null rest-list)) (cast-list rest-list))))
		  (if (member someone rest-cast-list) rest-cast-list
			  (cons someone rest-cast-list))))
(defun round-table-scores (database cast-list)
	(let* ((left-rotated (append (cdr cast-list) (cons (car cast-list) nil)))
		   (right-rotated (append (last cast-list) (butlast cast-list)))
		   (paired (mapcar 'list (append cast-list cast-list) (append left-rotated right-rotated))))
		 (mapcar (lambda (x) (caddar (member x database :test #'equal
											 :key (lambda (x) (cons (car x) (cons (cadr x) nil))))))
				 paired)))
(defun adventofcode.com/2015/day/13 (&optional (pathname adventofcode.com/2015/day/13/input.txt))
	(let* ((forms (uiop:read-file-forms pathname))
		   (database (database forms))
		   (cast-list (cast-list forms)))
		  (apply 'max (mapcar (lambda (x) (apply '+ (round-table-scores database x))) (perm cast-list)))
		  ))
;; Call (adventofcode.com/2015/day/13) with a file with the default pathname "adventofcode.com:2015:day:13:input.txt" to find the answer.

(defun apathetic-indices (&optional (list-length 8))
	(loop for i below list-length collect (cons i (cons (+ 8 (mod (1+ i) 8)) nil))))
(defun remove-nth-element (nth list)
  "Return a copy of a LIST, with NTH element removed."
  (loop for i in list
        for idx from 0
        unless (= idx nth)
        collect i))
(defun candidate-round-table/you-scores (database cast-list)
	(let* ((scores (round-table-scores database cast-list))
		   (candidates (mapcar (lambda (x)
									   (let ((r (remove-nth-element (cadr x) scores)))
											(remove-nth-element (car x) r)))
							   (apathetic-indices (/ (length scores) 2))))
		   (sum-list (mapcar (lambda (x) (apply '+ x)) candidates))
		   (max-score (apply 'max sum-list))
		   (i (- (length candidates) (length (member max-score sum-list)))))
		 (nth i candidates)))
(defun adventofcode.com/2015/day/13/Part/II (&optional (pathname adventofcode.com/2015/day/13/input.txt))
	(let* ((forms (uiop:read-file-forms pathname))
		   (database (database forms))
		   (cast-list (cast-list forms))
		   (perm-list (perm cast-list))
		   (scores/you-list (mapcar (lambda (x) (candidate-round-table/you-scores database x)) perm-list)))
		  (apply 'max (mapcar (lambda (x) (apply '+ x)) scores/you-list))))
;; Call (adventofcode.com/2015/day/13/Part/II) with a file with the default pathname "adventofcode.com:2015:day:13:input.txt" to find the answer.
